{"ast":null,"code":"var _s = $RefreshSig$();\n// eslint-disable-next-line no-unused-vars\nimport React, { useEffect, useRef } from \"react\";\nconst VoiceControl = ({\n  isRecording,\n  onTranscriptChange,\n  onStartRecording,\n  onStopRecording,\n  onGenerateCode,\n  onCompileCode,\n  onSaveCode\n}) => {\n  _s();\n  const recognitionRef = useRef(null);\n  const listeningRef = useRef(false);\n  useEffect(() => {\n    if (!(\"webkitSpeechRecognition\" in window)) {\n      alert(\"Speech Recognition not supported\");\n      return;\n    }\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = false;\n    recognition.lang = \"en-US\";\n    recognition.onresult = event => {\n      let transcriptText = \"\";\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\n        transcriptText += event.results[i][0].transcript.trim() + \" \";\n      }\n      transcriptText = transcriptText.toLowerCase().trim();\n      console.log(\"Heard:\", transcriptText);\n\n      // Commands detection\n      if (transcriptText.includes(\"start recording\")) {\n        console.log(\"Command: Start Recording\");\n        onStartRecording();\n        listeningRef.current = true;\n        return;\n      }\n      if (transcriptText.includes(\"stop recording\")) {\n        console.log(\"Command: Stop Recording\");\n        onStopRecording();\n        listeningRef.current = false;\n        return;\n      }\n      if (transcriptText.includes(\"generate code\")) {\n        console.log(\"Command: Generate Code\");\n        onGenerateCode();\n        return;\n      }\n      if (transcriptText.includes(\"compile\")) {\n        console.log(\"Command: Compile Code\");\n        onCompileCode();\n        return;\n      }\n      if (transcriptText.includes(\"save\")) {\n        console.log(\"Command: Save Code\");\n        onSaveCode();\n        return;\n      }\n\n      // Append transcript only if recording is active\n      if (isRecording && listeningRef.current) {\n        onTranscriptChange(prev => prev ? prev + \" \" + transcriptText : transcriptText);\n      }\n    };\n    recognition.onerror = e => {\n      console.error(\"Speech recognition error\", e);\n    };\n    recognition.onend = () => {\n      console.log(\"Speech recognition ended, restarting...\");\n      if (listeningRef.current) {\n        recognition.start();\n      }\n    };\n    recognitionRef.current = recognition;\n    recognition.start();\n    listeningRef.current = isRecording;\n    return () => {\n      listeningRef.current = false;\n      recognition.stop();\n    };\n  }, [isRecording, onStartRecording, onStopRecording, onGenerateCode, onCompileCode, onSaveCode, onTranscriptChange]);\n  return null; // UI is handled in App.jsx\n};\n_s(VoiceControl, \"9c0AUjrAA6E6gZdUe0mhfNN25rE=\");\n_c = VoiceControl;\nexport default VoiceControl;\nvar _c;\n$RefreshReg$(_c, \"VoiceControl\");","map":{"version":3,"names":["React","useEffect","useRef","VoiceControl","isRecording","onTranscriptChange","onStartRecording","onStopRecording","onGenerateCode","onCompileCode","onSaveCode","_s","recognitionRef","listeningRef","window","alert","recognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","transcriptText","i","resultIndex","results","length","transcript","trim","toLowerCase","console","log","includes","current","prev","onerror","e","error","onend","start","stop","_c","$RefreshReg$"],"sources":["E:/Voice_Controlled_IDE/codevoice-frontend/src/VoiceControl.jsx"],"sourcesContent":["// eslint-disable-next-line no-unused-vars\r\nimport React, { useEffect, useRef } from \"react\";\r\n\r\nconst VoiceControl = ({\r\n  isRecording,\r\n  onTranscriptChange,\r\n  onStartRecording,\r\n  onStopRecording,\r\n  onGenerateCode,\r\n  onCompileCode,\r\n  onSaveCode,\r\n}) => {\r\n  const recognitionRef = useRef(null);\r\n  const listeningRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!(\"webkitSpeechRecognition\" in window)) {\r\n      alert(\"Speech Recognition not supported\");\r\n      return;\r\n    }\r\n\r\n    const recognition = new window.webkitSpeechRecognition();\r\n    recognition.continuous = true;\r\n    recognition.interimResults = false;\r\n    recognition.lang = \"en-US\";\r\n\r\n    recognition.onresult = (event) => {\r\n      let transcriptText = \"\";\r\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n        transcriptText += event.results[i][0].transcript.trim() + \" \";\r\n      }\r\n\r\n      transcriptText = transcriptText.toLowerCase().trim();\r\n      console.log(\"Heard:\", transcriptText);\r\n\r\n      // Commands detection\r\n      if (transcriptText.includes(\"start recording\")) {\r\n        console.log(\"Command: Start Recording\");\r\n        onStartRecording();\r\n        listeningRef.current = true;\r\n        return;\r\n      }\r\n\r\n      if (transcriptText.includes(\"stop recording\")) {\r\n        console.log(\"Command: Stop Recording\");\r\n        onStopRecording();\r\n        listeningRef.current = false;\r\n        return;\r\n      }\r\n\r\n      if (transcriptText.includes(\"generate code\")) {\r\n        console.log(\"Command: Generate Code\");\r\n        onGenerateCode();\r\n        return;\r\n      }\r\n\r\n      if (transcriptText.includes(\"compile\")) {\r\n        console.log(\"Command: Compile Code\");\r\n        onCompileCode();\r\n        return;\r\n      }\r\n\r\n      if (transcriptText.includes(\"save\")) {\r\n        console.log(\"Command: Save Code\");\r\n        onSaveCode();\r\n        return;\r\n      }\r\n\r\n      // Append transcript only if recording is active\r\n      if (isRecording && listeningRef.current) {\r\n        onTranscriptChange((prev) => (prev ? prev + \" \" + transcriptText : transcriptText));\r\n      }\r\n    };\r\n\r\n    recognition.onerror = (e) => {\r\n      console.error(\"Speech recognition error\", e);\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      console.log(\"Speech recognition ended, restarting...\");\r\n      if (listeningRef.current) {\r\n        recognition.start();\r\n      }\r\n    };\r\n\r\n    recognitionRef.current = recognition;\r\n    recognition.start();\r\n    listeningRef.current = isRecording;\r\n\r\n    return () => {\r\n      listeningRef.current = false;\r\n      recognition.stop();\r\n    };\r\n  }, [isRecording, onStartRecording, onStopRecording, onGenerateCode, onCompileCode, onSaveCode, onTranscriptChange]);\r\n\r\n  return null; // UI is handled in App.jsx\r\n};\r\n\r\nexport default VoiceControl;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}