{"ast":null,"code":"var _jsxFileName = \"D:\\\\Voice_Controlled_IDE\\\\codevoice-frontend\\\\src\\\\MicInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MicInput({\n  setTranscript\n}) {\n  _s();\n  const mediaRecorderRef = useRef(null);\n  const audioChunks = useRef([]);\n  const startRecording = async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    audioChunks.current = [];\n    mediaRecorderRef.current = new MediaRecorder(stream);\n    mediaRecorderRef.current.ondataavailable = event => {\n      if (event.data.size > 0) audioChunks.current.push(event.data);\n    };\n    mediaRecorderRef.current.onstop = async () => {\n      const audioBlob = new Blob(audioChunks.current, {\n        type: 'audio/wav'\n      });\n      const formData = new FormData();\n      formData.append('audio', audioBlob);\n      try {\n        const response = await fetch('http://localhost:5001/api/transcribe', {\n          method: 'POST',\n          body: formData\n        });\n        const data = await response.json();\n        console.log('Transcript:', data.transcript);\n        if (setTranscript && typeof setTranscript === 'function') {\n          setTranscript(data.transcript);\n        }\n      } catch (error) {\n        console.error('Transcription failed:', error);\n      }\n    };\n    mediaRecorderRef.current.start();\n    setTimeout(() => {\n      mediaRecorderRef.current.stop();\n    }, 5000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: startRecording,\n    className: \"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700\",\n    children: \"\\uD83C\\uDF99\\uFE0F Start Recording\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(MicInput, \"PRUgL3VGFUbn7Xi5Akt5U5TrmRI=\");\n_c = MicInput;\nexport default MicInput;\nvar _c;\n$RefreshReg$(_c, \"MicInput\");","map":{"version":3,"names":["React","useRef","jsxDEV","_jsxDEV","MicInput","setTranscript","_s","mediaRecorderRef","audioChunks","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","event","data","size","push","onstop","audioBlob","Blob","type","formData","FormData","append","response","fetch","method","body","json","console","log","transcript","error","start","setTimeout","stop","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Voice_Controlled_IDE/codevoice-frontend/src/MicInput.jsx"],"sourcesContent":["import React, { useRef } from 'react';\r\n\r\nfunction MicInput({ setTranscript }) {\r\n  const mediaRecorderRef = useRef(null);\r\n  const audioChunks = useRef([]);\r\n\r\n  const startRecording = async () => {\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n    audioChunks.current = [];\r\n    mediaRecorderRef.current = new MediaRecorder(stream);\r\n\r\n    mediaRecorderRef.current.ondataavailable = (event) => {\r\n      if (event.data.size > 0) audioChunks.current.push(event.data);\r\n    };\r\n\r\n    mediaRecorderRef.current.onstop = async () => {\r\n      const audioBlob = new Blob(audioChunks.current, { type: 'audio/wav' });\r\n      const formData = new FormData();\r\n      formData.append('audio', audioBlob);\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:5001/api/transcribe', {\r\n          method: 'POST',\r\n          body: formData,\r\n        });\r\n        const data = await response.json();\r\n        console.log('Transcript:', data.transcript);\r\n        if (setTranscript && typeof setTranscript === 'function') {\r\n          setTranscript(data.transcript);\r\n        }\r\n      } catch (error) {\r\n        console.error('Transcription failed:', error);\r\n      }\r\n    };\r\n\r\n    mediaRecorderRef.current.start();\r\n\r\n    setTimeout(() => {\r\n      mediaRecorderRef.current.stop();\r\n    }, 5000);\r\n  };\r\n\r\n  return (\r\n    <button\r\n      onClick={startRecording}\r\n      className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700\"\r\n    >\r\n      üéôÔ∏è Start Recording\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default MicInput;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,QAAQA,CAAC;EAAEC;AAAc,CAAC,EAAE;EAAAC,EAAA;EACnC,MAAMC,gBAAgB,GAAGN,MAAM,CAAC,IAAI,CAAC;EACrC,MAAMO,WAAW,GAAGP,MAAM,CAAC,EAAE,CAAC;EAE9B,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACzEN,WAAW,CAACO,OAAO,GAAG,EAAE;IACxBR,gBAAgB,CAACQ,OAAO,GAAG,IAAIC,aAAa,CAACN,MAAM,CAAC;IAEpDH,gBAAgB,CAACQ,OAAO,CAACE,eAAe,GAAIC,KAAK,IAAK;MACpD,IAAIA,KAAK,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAEZ,WAAW,CAACO,OAAO,CAACM,IAAI,CAACH,KAAK,CAACC,IAAI,CAAC;IAC/D,CAAC;IAEDZ,gBAAgB,CAACQ,OAAO,CAACO,MAAM,GAAG,YAAY;MAC5C,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAChB,WAAW,CAACO,OAAO,EAAE;QAAEU,IAAI,EAAE;MAAY,CAAC,CAAC;MACtE,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,SAAS,CAAC;MAEnC,IAAI;QACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;UACnEC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEN;QACR,CAAC,CAAC;QACF,MAAMP,IAAI,GAAG,MAAMU,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEhB,IAAI,CAACiB,UAAU,CAAC;QAC3C,IAAI/B,aAAa,IAAI,OAAOA,aAAa,KAAK,UAAU,EAAE;UACxDA,aAAa,CAACc,IAAI,CAACiB,UAAU,CAAC;QAChC;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF,CAAC;IAED9B,gBAAgB,CAACQ,OAAO,CAACuB,KAAK,CAAC,CAAC;IAEhCC,UAAU,CAAC,MAAM;MACfhC,gBAAgB,CAACQ,OAAO,CAACyB,IAAI,CAAC,CAAC;IACjC,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,oBACErC,OAAA;IACEsC,OAAO,EAAEhC,cAAe;IACxBiC,SAAS,EAAC,8DAA8D;IAAAC,QAAA,EACzE;EAED;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEb;AAACzC,EAAA,CAhDQF,QAAQ;AAAA4C,EAAA,GAAR5C,QAAQ;AAkDjB,eAAeA,QAAQ;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}