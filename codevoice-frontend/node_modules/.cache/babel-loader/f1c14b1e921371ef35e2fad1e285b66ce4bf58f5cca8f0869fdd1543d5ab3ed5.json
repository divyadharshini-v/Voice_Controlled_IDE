{"ast":null,"code":"var _jsxFileName = \"D:\\\\codevoice\\\\codevoice-frontend\\\\src\\\\VoiceControl.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VoiceControl = ({\n  setTranscript\n}) => {\n  _s();\n  const recognitionRef = useRef(null);\n  const [isActivated, setIsActivated] = useState(false);\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      alert(\"Speech Recognition is not supported in this browser.\");\n      return;\n    }\n\n    // Passive recognizer to detect commands\n    const passiveRecognition = new SpeechRecognition();\n    passiveRecognition.continuous = true;\n    passiveRecognition.lang = \"en-US\";\n    passiveRecognition.interimResults = false;\n\n    // Active recognizer to listen for prompts\n    const activeRecognition = new SpeechRecognition();\n    activeRecognition.continuous = true;\n    activeRecognition.lang = \"en-US\";\n    activeRecognition.interimResults = false;\n    recognitionRef.current = activeRecognition;\n\n    // ✅ Handle commands in passive mode\n    passiveRecognition.onresult = event => {\n      const command = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();\n      console.log(\"Heard (passive):\", command);\n      if (command.includes(\"start recording\") && !isActivated) {\n        setIsActivated(true);\n        passiveRecognition.stop();\n        activeRecognition.start();\n        console.log(\"🎤 Voice command: Start recording\");\n      } else if (command.includes(\"scroll up\")) {\n        window.scrollBy({\n          top: -200,\n          behavior: \"smooth\"\n        });\n        console.log(\"⬆️ Voice command: Scroll up\");\n      } else if (command.includes(\"scroll down\")) {\n        window.scrollBy({\n          top: 200,\n          behavior: \"smooth\"\n        });\n        console.log(\"⬇️ Voice command: Scroll down\");\n      } else if (command.includes(\"stop recording\")) {\n        if (isActivated) {\n          setIsActivated(false);\n          activeRecognition.stop();\n          console.log(\"🛑 Voice command: Stop recording\");\n        }\n      }\n    };\n    passiveRecognition.onerror = e => {\n      console.error(\"Passive recognition error:\", e);\n    };\n    passiveRecognition.start();\n\n    // ✅ Handle code input after recording starts\n    activeRecognition.onresult = event => {\n      const result = event.results[event.results.length - 1][0].transcript.trim();\n      console.log(\"🎙️ Captured input:\", result);\n      setTranscript(result);\n      activeRecognition.stop();\n      setIsActivated(false);\n      // Re-enable passive recognition to wait for next command\n      passiveRecognition.start();\n    };\n    activeRecognition.onerror = event => {\n      console.error(\"Active recognition error:\", event.error);\n    };\n    return () => {\n      passiveRecognition.stop();\n      activeRecognition.stop();\n    };\n  }, [isActivated, setTranscript]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center mb-4\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-lg text-gray-700\",\n      children: [\"\\uD83C\\uDFA7 Say \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"\\\"start recording\\\"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 16\n      }, this), \", \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"\\\"scroll up\\\"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 52\n      }, this), \", \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"\\\"scroll down\\\"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 82\n      }, this), \", or \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"\\\"stop recording\\\"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 117\n      }, this), \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(VoiceControl, \"EejNgzZ2++Cy0tIgu2HzZyVjHUE=\");\n_c = VoiceControl;\nexport default VoiceControl;\nvar _c;\n$RefreshReg$(_c, \"VoiceControl\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","VoiceControl","setTranscript","_s","recognitionRef","isActivated","setIsActivated","SpeechRecognition","window","webkitSpeechRecognition","alert","passiveRecognition","continuous","lang","interimResults","activeRecognition","current","onresult","event","command","results","length","transcript","trim","toLowerCase","console","log","includes","stop","start","scrollBy","top","behavior","onerror","e","error","result","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/codevoice/codevoice-frontend/src/VoiceControl.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\n\r\nconst VoiceControl = ({ setTranscript }) => {\r\n  const recognitionRef = useRef(null);\r\n  const [isActivated, setIsActivated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const SpeechRecognition =\r\n      window.SpeechRecognition || window.webkitSpeechRecognition;\r\n\r\n    if (!SpeechRecognition) {\r\n      alert(\"Speech Recognition is not supported in this browser.\");\r\n      return;\r\n    }\r\n\r\n    // Passive recognizer to detect commands\r\n    const passiveRecognition = new SpeechRecognition();\r\n    passiveRecognition.continuous = true;\r\n    passiveRecognition.lang = \"en-US\";\r\n    passiveRecognition.interimResults = false;\r\n\r\n    // Active recognizer to listen for prompts\r\n    const activeRecognition = new SpeechRecognition();\r\n    activeRecognition.continuous = true;\r\n    activeRecognition.lang = \"en-US\";\r\n    activeRecognition.interimResults = false;\r\n\r\n    recognitionRef.current = activeRecognition;\r\n\r\n    // ✅ Handle commands in passive mode\r\n    passiveRecognition.onresult = (event) => {\r\n      const command = event.results[event.results.length - 1][0].transcript.trim().toLowerCase();\r\n      console.log(\"Heard (passive):\", command);\r\n\r\n      if (command.includes(\"start recording\") && !isActivated) {\r\n        setIsActivated(true);\r\n        passiveRecognition.stop();\r\n        activeRecognition.start();\r\n        console.log(\"🎤 Voice command: Start recording\");\r\n      } else if (command.includes(\"scroll up\")) {\r\n        window.scrollBy({ top: -200, behavior: \"smooth\" });\r\n        console.log(\"⬆️ Voice command: Scroll up\");\r\n      } else if (command.includes(\"scroll down\")) {\r\n        window.scrollBy({ top: 200, behavior: \"smooth\" });\r\n        console.log(\"⬇️ Voice command: Scroll down\");\r\n      } else if (command.includes(\"stop recording\")) {\r\n        if (isActivated) {\r\n          setIsActivated(false);\r\n          activeRecognition.stop();\r\n          console.log(\"🛑 Voice command: Stop recording\");\r\n        }\r\n      }\r\n    };\r\n\r\n    passiveRecognition.onerror = (e) => {\r\n      console.error(\"Passive recognition error:\", e);\r\n    };\r\n\r\n    passiveRecognition.start();\r\n\r\n    // ✅ Handle code input after recording starts\r\n    activeRecognition.onresult = (event) => {\r\n      const result = event.results[event.results.length - 1][0].transcript.trim();\r\n      console.log(\"🎙️ Captured input:\", result);\r\n      setTranscript(result);\r\n      activeRecognition.stop();\r\n      setIsActivated(false);\r\n      // Re-enable passive recognition to wait for next command\r\n      passiveRecognition.start();\r\n    };\r\n\r\n    activeRecognition.onerror = (event) => {\r\n      console.error(\"Active recognition error:\", event.error);\r\n    };\r\n\r\n    return () => {\r\n      passiveRecognition.stop();\r\n      activeRecognition.stop();\r\n    };\r\n  }, [isActivated, setTranscript]);\r\n\r\n  return (\r\n    <div className=\"text-center mb-4\">\r\n      <p className=\"text-lg text-gray-700\">\r\n        🎧 Say <strong>\"start recording\"</strong>, <strong>\"scroll up\"</strong>, <strong>\"scroll down\"</strong>, or <strong>\"stop recording\"</strong>.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VoiceControl;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}