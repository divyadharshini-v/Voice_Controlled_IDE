{"ast":null,"code":"mediaRecorderRef.current.onstop = async () => {\n  const audioBlob = new Blob(audioChunksRef.current, {\n    type: 'audio/webm'\n  });\n  const formData = new FormData();\n  formData.append('audio', audioBlob, 'recording.webm');\n  try {\n    var _transcribeResponse$d;\n    const transcribeResponse = await axios.post('http://localhost:5001/api/transcribe', formData);\n    const text = (_transcribeResponse$d = transcribeResponse.data.text) === null || _transcribeResponse$d === void 0 ? void 0 : _transcribeResponse$d.trim();\n    if (!text) {\n      alert(\"Transcription returned nothing.\");\n      return;\n    }\n    console.log(\"Transcribed Text:\", text);\n    onTranscript(text); // ← displays on UI\n\n    const genResponse = await axios.post('http://localhost:5000/api/parse', {\n      command: text\n    });\n    const code = genResponse.data.code || \"// Error: No code generated\";\n    localStorage.setItem('generatedCode', code);\n    window.location.reload();\n  } catch (err) {\n    console.error(\"Transcription or code generation error:\", err);\n    alert(\"Something went wrong. Check the console.\");\n  }\n};","map":{"version":3,"names":["mediaRecorderRef","current","onstop","audioBlob","Blob","audioChunksRef","type","formData","FormData","append","_transcribeResponse$d","transcribeResponse","axios","post","text","data","trim","alert","console","log","onTranscript","genResponse","command","code","localStorage","setItem","window","location","reload","err","error"],"sources":["D:/Voice_Controlled_IDE/codevoice-frontend/src/MicInput.jsx"],"sourcesContent":["mediaRecorderRef.current.onstop = async () => {\r\n  const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\r\n  const formData = new FormData();\r\n  formData.append('audio', audioBlob, 'recording.webm');\r\n\r\n  try {\r\n    const transcribeResponse = await axios.post('http://localhost:5001/api/transcribe', formData);\r\n    const text = transcribeResponse.data.text?.trim();\r\n    \r\n    if (!text) {\r\n      alert(\"Transcription returned nothing.\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Transcribed Text:\", text);\r\n    onTranscript(text); // ← displays on UI\r\n\r\n    const genResponse = await axios.post('http://localhost:5000/api/parse', { command: text });\r\n    const code = genResponse.data.code || \"// Error: No code generated\";\r\n    localStorage.setItem('generatedCode', code);\r\n    window.location.reload();\r\n  } catch (err) {\r\n    console.error(\"Transcription or code generation error:\", err);\r\n    alert(\"Something went wrong. Check the console.\");\r\n  }\r\n};\r\n"],"mappings":"AAAAA,gBAAgB,CAACC,OAAO,CAACC,MAAM,GAAG,YAAY;EAC5C,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACC,cAAc,CAACJ,OAAO,EAAE;IAAEK,IAAI,EAAE;EAAa,CAAC,CAAC;EAC1E,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEN,SAAS,EAAE,gBAAgB,CAAC;EAErD,IAAI;IAAA,IAAAO,qBAAA;IACF,MAAMC,kBAAkB,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,sCAAsC,EAAEN,QAAQ,CAAC;IAC7F,MAAMO,IAAI,IAAAJ,qBAAA,GAAGC,kBAAkB,CAACI,IAAI,CAACD,IAAI,cAAAJ,qBAAA,uBAA5BA,qBAAA,CAA8BM,IAAI,CAAC,CAAC;IAEjD,IAAI,CAACF,IAAI,EAAE;MACTG,KAAK,CAAC,iCAAiC,CAAC;MACxC;IACF;IAEAC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEL,IAAI,CAAC;IACtCM,YAAY,CAACN,IAAI,CAAC,CAAC,CAAC;;IAEpB,MAAMO,WAAW,GAAG,MAAMT,KAAK,CAACC,IAAI,CAAC,iCAAiC,EAAE;MAAES,OAAO,EAAER;IAAK,CAAC,CAAC;IAC1F,MAAMS,IAAI,GAAGF,WAAW,CAACN,IAAI,CAACQ,IAAI,IAAI,6BAA6B;IACnEC,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEF,IAAI,CAAC;IAC3CG,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZX,OAAO,CAACY,KAAK,CAAC,yCAAyC,EAAED,GAAG,CAAC;IAC7DZ,KAAK,CAAC,0CAA0C,CAAC;EACnD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}