{"ast":null,"code":"var _jsxFileName = \"D:\\\\codevoice-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CodeEditor from './components/Editor';\nimport MicInput from './components/MicInput';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [code, setCode] = useState('');\n\n  // Called when voice input is transcribed\n  const handleVoiceCommand = async spokenText => {\n    console.log(\"Voice Input:\", spokenText);\n    try {\n      // Send voice text to Flask NLP API\n      const response = await axios.post('http://localhost:5000/api/parse', {\n        text: spokenText\n      });\n\n      // Append generated code to the editor\n      if (response.data && response.data.code) {\n        setCode(prevCode => prevCode + '\\n' + response.data.code);\n      } else {\n        alert(\"No code received from backend.\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      alert(\"Error processing voice command.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83E\\uDDE0 CodeVoice \\u2013 Voice-Controlled IDE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MicInput, {\n      onTranscript: handleVoiceCommand\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CodeEditor, {\n      code: code,\n      setCode: setCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DeMoM/F9TqKLFftGs/rnPbEsxbc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CodeEditor","MicInput","axios","jsxDEV","_jsxDEV","App","_s","code","setCode","handleVoiceCommand","spokenText","console","log","response","post","text","data","prevCode","alert","error","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","onTranscript","_c","$RefreshReg$"],"sources":["D:/codevoice-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CodeEditor from './components/Editor';\nimport MicInput from './components/MicInput';\nimport axios from 'axios';\n\nfunction App() {\n  const [code, setCode] = useState('');\n\n  // Called when voice input is transcribed\n  const handleVoiceCommand = async (spokenText) => {\n    console.log(\"Voice Input:\", spokenText);\n\n    try {\n      // Send voice text to Flask NLP API\n      const response = await axios.post('http://localhost:5000/api/parse', {\n        text: spokenText,\n      });\n\n      // Append generated code to the editor\n      if (response.data && response.data.code) {\n        setCode((prevCode) => prevCode + '\\n' + response.data.code);\n      } else {\n        alert(\"No code received from backend.\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      alert(\"Error processing voice command.\");\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial' }}>\n      <h1>ðŸ§  CodeVoice â€“ Voice-Controlled IDE</h1>\n      <MicInput onTranscript={handleVoiceCommand} />\n      <CodeEditor code={code} setCode={setCode} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAMU,kBAAkB,GAAG,MAAOC,UAAU,IAAK;IAC/CC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,UAAU,CAAC;IAEvC,IAAI;MACF;MACA,MAAMG,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,iCAAiC,EAAE;QACnEC,IAAI,EAAEL;MACR,CAAC,CAAC;;MAEF;MACA,IAAIG,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACT,IAAI,EAAE;QACvCC,OAAO,CAAES,QAAQ,IAAKA,QAAQ,GAAG,IAAI,GAAGJ,QAAQ,CAACG,IAAI,CAACT,IAAI,CAAC;MAC7D,CAAC,MAAM;QACLW,KAAK,CAAC,gCAAgC,CAAC;MACzC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BD,KAAK,CAAC,iCAAiC,CAAC;IAC1C;EACF,CAAC;EAED,oBACEd,OAAA;IAAKgB,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,UAAU,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBACnDnB,OAAA;MAAAmB,QAAA,EAAI;IAAmC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5CvB,OAAA,CAACH,QAAQ;MAAC2B,YAAY,EAAEnB;IAAmB;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9CvB,OAAA,CAACJ,UAAU;MAACO,IAAI,EAAEA,IAAK;MAACC,OAAO,EAAEA;IAAQ;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV;AAACrB,EAAA,CAhCQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}