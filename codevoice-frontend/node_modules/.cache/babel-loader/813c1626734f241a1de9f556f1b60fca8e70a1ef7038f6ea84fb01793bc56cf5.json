{"ast":null,"code":"var _jsxFileName = \"D:\\\\Voice_Controlled_IDE\\\\codevoice-frontend\\\\src\\\\MicInput.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MicInput({\n  onTranscript\n}) {\n  _s();\n  const [isRecording, setIsRecording] = useState(false);\n  const [manualInput, setManualInput] = useState('');\n  const [error, setError] = useState('');\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      audioChunksRef.current = [];\n      mediaRecorderRef.current.ondataavailable = event => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n      mediaRecorderRef.current.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, {\n          type: 'audio/webm'\n        });\n        const formData = new FormData();\n        formData.append('audio', audioBlob, 'recording.webm');\n        try {\n          // Transcribe with forced English language\n          const response = await axios.post('http://localhost:5001/api/transcribe?lang=en', formData);\n          const text = response.data.transcript;\n          if (onTranscript) onTranscript(text);\n\n          // Now send to backend for code generation\n          const genResponse = await axios.post('http://localhost:5000/api/parse', {\n            command: text // âœ… fixed key\n          });\n          const code = genResponse.data.code;\n          localStorage.setItem('generatedCode', code);\n          window.location.reload();\n        } catch (err) {\n          console.error('Transcription or Code Generation Error:', err);\n          setError('Voice processing failed. Please try typing below.');\n        }\n      };\n      mediaRecorderRef.current.start();\n      setIsRecording(true);\n    } catch (err) {\n      console.error('Microphone access failed:', err);\n      setError('Microphone not accessible. Try manual input.');\n    }\n  };\n  const stopRecording = () => {\n    mediaRecorderRef.current.stop();\n    setIsRecording(false);\n  };\n  const handleManualSubmit = async () => {\n    if (!manualInput.trim()) return;\n    if (onTranscript) onTranscript(manualInput);\n    try {\n      const response = await axios.post('http://localhost:5000/api/parse', {\n        command: manualInput // âœ… consistent with Flask\n      });\n      const code = response.data.code;\n      localStorage.setItem('generatedCode', code);\n      window.location.reload();\n    } catch (err) {\n      console.error('Manual input code generation failed:', err);\n      setError('Manual code generation failed.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isRecording ? stopRecording : startRecording,\n      className: `px-4 py-2 rounded text-white ${isRecording ? 'bg-red-500' : 'bg-green-600'}`,\n      children: isRecording ? 'Stop Recording' : 'ðŸŽ¤ Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-3 text-red-600\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your command here...\",\n        value: manualInput,\n        onChange: e => setManualInput(e.target.value),\n        className: \"border p-2 rounded w-full mb-2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleManualSubmit,\n        className: \"px-4 py-2 bg-blue-600 text-white rounded\",\n        children: \"Generate from Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(MicInput, \"s9XGG9MA3myoJv0Fltot6AHtUuM=\");\n_c = MicInput;\nexport default MicInput;\nvar _c;\n$RefreshReg$(_c, \"MicInput\");","map":{"version":3,"names":["React","useRef","useState","axios","jsxDEV","_jsxDEV","MicInput","onTranscript","_s","isRecording","setIsRecording","manualInput","setManualInput","error","setError","mediaRecorderRef","audioChunksRef","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","event","data","size","push","onstop","audioBlob","Blob","type","formData","FormData","append","response","post","text","transcript","genResponse","command","code","localStorage","setItem","window","location","reload","err","console","start","stopRecording","stop","handleManualSubmit","trim","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["D:/Voice_Controlled_IDE/codevoice-frontend/src/MicInput.jsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction MicInput({ onTranscript }) {\r\n  const [isRecording, setIsRecording] = useState(false);\r\n  const [manualInput, setManualInput] = useState('');\r\n  const [error, setError] = useState('');\r\n  const mediaRecorderRef = useRef(null);\r\n  const audioChunksRef = useRef([]);\r\n\r\n  const startRecording = async () => {\r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n      mediaRecorderRef.current = new MediaRecorder(stream);\r\n      audioChunksRef.current = [];\r\n\r\n      mediaRecorderRef.current.ondataavailable = (event) => {\r\n        if (event.data.size > 0) {\r\n          audioChunksRef.current.push(event.data);\r\n        }\r\n      };\r\n\r\n      mediaRecorderRef.current.onstop = async () => {\r\n        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\r\n        const formData = new FormData();\r\n        formData.append('audio', audioBlob, 'recording.webm');\r\n\r\n        try {\r\n          // Transcribe with forced English language\r\n          const response = await axios.post('http://localhost:5001/api/transcribe?lang=en', formData);\r\n          const text = response.data.transcript;\r\n          if (onTranscript) onTranscript(text);\r\n\r\n          // Now send to backend for code generation\r\n          const genResponse = await axios.post('http://localhost:5000/api/parse', {\r\n            command: text, // âœ… fixed key\r\n          });\r\n\r\n          const code = genResponse.data.code;\r\n          localStorage.setItem('generatedCode', code);\r\n          window.location.reload();\r\n\r\n        } catch (err) {\r\n          console.error('Transcription or Code Generation Error:', err);\r\n          setError('Voice processing failed. Please try typing below.');\r\n        }\r\n      };\r\n\r\n      mediaRecorderRef.current.start();\r\n      setIsRecording(true);\r\n    } catch (err) {\r\n      console.error('Microphone access failed:', err);\r\n      setError('Microphone not accessible. Try manual input.');\r\n    }\r\n  };\r\n\r\n  const stopRecording = () => {\r\n    mediaRecorderRef.current.stop();\r\n    setIsRecording(false);\r\n  };\r\n\r\n  const handleManualSubmit = async () => {\r\n    if (!manualInput.trim()) return;\r\n\r\n    if (onTranscript) onTranscript(manualInput);\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/parse', {\r\n        command: manualInput, // âœ… consistent with Flask\r\n      });\r\n\r\n      const code = response.data.code;\r\n      localStorage.setItem('generatedCode', code);\r\n      window.location.reload();\r\n    } catch (err) {\r\n      console.error('Manual input code generation failed:', err);\r\n      setError('Manual code generation failed.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <button\r\n        onClick={isRecording ? stopRecording : startRecording}\r\n        className={`px-4 py-2 rounded text-white ${isRecording ? 'bg-red-500' : 'bg-green-600'}`}\r\n      >\r\n        {isRecording ? 'Stop Recording' : 'ðŸŽ¤ Start Recording'}\r\n      </button>\r\n\r\n      {error && (\r\n        <p className=\"mt-3 text-red-600\">\r\n          {error}\r\n        </p>\r\n      )}\r\n\r\n      {/* Fallback input field if mic fails */}\r\n      <div className=\"mt-4\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type your command here...\"\r\n          value={manualInput}\r\n          onChange={(e) => setManualInput(e.target.value)}\r\n          className=\"border p-2 rounded w-full mb-2\"\r\n        />\r\n        <button\r\n          onClick={handleManualSubmit}\r\n          className=\"px-4 py-2 bg-blue-600 text-white rounded\"\r\n        >\r\n          Generate from Text\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MicInput;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}