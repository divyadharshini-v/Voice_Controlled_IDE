{"ast":null,"code":"var _jsxFileName = \"D:\\\\codevoice-frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CodeEditor from './components/Editor';\nimport MicInput from './components/MicInput';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [code, setCode] = useState('');\n  const handleVoiceCommand = async text => {\n    console.log(\"Voice Input:\", text);\n    try {\n      const response = await axios.post('http://localhost:5000/api/parse-intent', {\n        text\n      });\n      setCode(prev => prev + '\\n' + response.data.code);\n    } catch (error) {\n      alert('Error connecting to backend');\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"CodeVoice IDE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MicInput, {\n      onTranscript: handleVoiceCommand\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CodeEditor, {\n      code: code,\n      setCode: setCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"DeMoM/F9TqKLFftGs/rnPbEsxbc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CodeEditor","MicInput","axios","jsxDEV","_jsxDEV","App","_s","code","setCode","handleVoiceCommand","text","console","log","response","post","prev","data","error","alert","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onTranscript","_c","$RefreshReg$"],"sources":["D:/codevoice-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport CodeEditor from './components/Editor';\nimport MicInput from './components/MicInput';\nimport axios from 'axios';\n\nconst App = () => {\n  const [code, setCode] = useState('');\n\n  const handleVoiceCommand = async (text) => {\n    console.log(\"Voice Input:\", text);\n    try {\n      const response = await axios.post('http://localhost:5000/api/parse-intent', { text });\n      setCode((prev) => prev + '\\n' + response.data.code);\n    } catch (error) {\n      alert('Error connecting to backend');\n      console.error(error);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px' }}>\n      <h1>CodeVoice IDE</h1>\n      <MicInput onTranscript={handleVoiceCommand} />\n      <CodeEditor code={code} setCode={setCode} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,qBAAqB;AAC5C,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMU,kBAAkB,GAAG,MAAOC,IAAI,IAAK;IACzCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,IAAI,CAAC;IACjC,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMX,KAAK,CAACY,IAAI,CAAC,wCAAwC,EAAE;QAAEJ;MAAK,CAAC,CAAC;MACrFF,OAAO,CAAEO,IAAI,IAAKA,IAAI,GAAG,IAAI,GAAGF,QAAQ,CAACG,IAAI,CAACT,IAAI,CAAC;IACrD,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,KAAK,CAAC,6BAA6B,CAAC;MACpCP,OAAO,CAACM,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,oBACEb,OAAA;IAAKe,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9BjB,OAAA;MAAAiB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBrB,OAAA,CAACH,QAAQ;MAACyB,YAAY,EAAEjB;IAAmB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9CrB,OAAA,CAACJ,UAAU;MAACO,IAAI,EAAEA,IAAK;MAACC,OAAO,EAAEA;IAAQ;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV,CAAC;AAACnB,EAAA,CArBID,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAuBT,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}