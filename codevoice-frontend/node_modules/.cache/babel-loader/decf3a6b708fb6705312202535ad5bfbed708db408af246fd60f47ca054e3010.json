{"ast":null,"code":"var _jsxFileName = \"D:\\\\codevoice-frontend\\\\src\\\\components\\\\MicInput.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MicInput = ({\n  onTranscript\n}) => {\n  const handleMicClick = () => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      alert(\"Your browser doesn't support Speech Recognition.\");\n      return;\n    }\n    const recognition = new SpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.interimResults = false;\n    recognition.maxAlternatives = 1;\n    recognition.onresult = event => {\n      const spokenText = event.results[0][0].transcript;\n      console.log(\"Transcript:\", spokenText);\n      onTranscript(spokenText);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech Recognition Error:\", event.error);\n      alert(\"Speech Recognition Error: \" + event.error);\n    };\n    recognition.start();\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleMicClick,\n    style: {\n      padding: '10px 20px',\n      fontSize: '16px'\n    },\n    children: \"\\uD83C\\uDFA4 Start Speaking\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_c = MicInput;\nexport default MicInput;\nvar _c;\n$RefreshReg$(_c, \"MicInput\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","MicInput","onTranscript","handleMicClick","SpeechRecognition","window","webkitSpeechRecognition","alert","recognition","lang","interimResults","maxAlternatives","onresult","event","spokenText","results","transcript","console","log","onerror","error","start","onClick","style","padding","fontSize","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/codevoice-frontend/src/components/MicInput.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst MicInput = ({ onTranscript }) => {\r\n  const handleMicClick = () => {\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n\r\n    if (!SpeechRecognition) {\r\n      alert(\"Your browser doesn't support Speech Recognition.\");\r\n      return;\r\n    }\r\n\r\n    const recognition = new SpeechRecognition();\r\n    recognition.lang = 'en-US';\r\n    recognition.interimResults = false;\r\n    recognition.maxAlternatives = 1;\r\n\r\n    recognition.onresult = (event) => {\r\n      const spokenText = event.results[0][0].transcript;\r\n      console.log(\"Transcript:\", spokenText);\r\n      onTranscript(spokenText);\r\n    };\r\n\r\n    recognition.onerror = (event) => {\r\n      console.error(\"Speech Recognition Error:\", event.error);\r\n      alert(\"Speech Recognition Error: \" + event.error);\r\n    };\r\n\r\n    recognition.start();\r\n  };\r\n\r\n  return (\r\n    <button onClick={handleMicClick} style={{ padding: '10px 20px', fontSize: '16px' }}>\r\n      ðŸŽ¤ Start Speaking\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default MicInput;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EACrC,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,iBAAiB,GAAGC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;IAEpF,IAAI,CAACF,iBAAiB,EAAE;MACtBG,KAAK,CAAC,kDAAkD,CAAC;MACzD;IACF;IAEA,MAAMC,WAAW,GAAG,IAAIJ,iBAAiB,CAAC,CAAC;IAC3CI,WAAW,CAACC,IAAI,GAAG,OAAO;IAC1BD,WAAW,CAACE,cAAc,GAAG,KAAK;IAClCF,WAAW,CAACG,eAAe,GAAG,CAAC;IAE/BH,WAAW,CAACI,QAAQ,GAAIC,KAAK,IAAK;MAChC,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,UAAU;MACjDC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEJ,UAAU,CAAC;MACtCZ,YAAY,CAACY,UAAU,CAAC;IAC1B,CAAC;IAEDN,WAAW,CAACW,OAAO,GAAIN,KAAK,IAAK;MAC/BI,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEP,KAAK,CAACO,KAAK,CAAC;MACvDb,KAAK,CAAC,4BAA4B,GAAGM,KAAK,CAACO,KAAK,CAAC;IACnD,CAAC;IAEDZ,WAAW,CAACa,KAAK,CAAC,CAAC;EACrB,CAAC;EAED,oBACErB,OAAA;IAAQsB,OAAO,EAAEnB,cAAe;IAACoB,KAAK,EAAE;MAAEC,OAAO,EAAE,WAAW;MAAEC,QAAQ,EAAE;IAAO,CAAE;IAAAC,QAAA,EAAC;EAEpF;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEb,CAAC;AAACC,EAAA,GAjCI9B,QAAQ;AAmCd,eAAeA,QAAQ;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}